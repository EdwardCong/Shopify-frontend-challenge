{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","card","padding","spacing","color","palette","text","secondary","alignItems","alignContent","App","classes","useState","filter","setFilter","searchResults","setSearchResults","nominatedList","setNominatedList","useEffect","requestFilms","axios","get","then","res","data","ResultsList","props","result","results","copyList","item","Title","Response","length","Grid","container","direction","Typography","Year","Button","variant","disabled","onClick","addNominee","e","tempList","listId","NominatedMovies","nominated","nominees","map","nominee","removeNominee","Banner","Alert","severity","Container","xs","class","TextField","id","label","value","onChange","target","fullWidth","Card","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b831845e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { Grid, Card, Container, Button, TextField, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Alert from '@material-ui/lab/Alert';\n\n// styling\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  card: {\n    padding: theme.spacing(2),\n    color: theme.palette.text.secondary,\n    alignItems: \"center\",\n    alignContent: \"space-between\"\n  },\n}));\n\n// This was built on the assumption that the search only returns one movie, \n// because the API has only returned 1 movie when searching \n// by title in the API page example, however it is possible to scale this\n// if the API ever returns more than one movie when searching\nfunction App() {\n  const classes = useStyles();\n\n  const mykey = 'ffaff682'; // change this key to your own omdbAPI key\n  const [filter, setFilter] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [nominatedList, setNominatedList] = useState([]);\n\n  // hit api when filter is changed\n  useEffect(() => {\n    requestFilms();\n  }, [filter])\n\n  // change the filter for movie searches\n  const changeFilter = e => {\n    const value = e.target.value\n    setFilter(value);\n  }\n\n  // hitting the api\n  const requestFilms = () => {\n    axios.get(`http://www.omdbapi.com/?t=${filter}&apikey=${mykey}`)\n      .then(res => {\n        setSearchResults(res.data)\n      })\n  }\n\n  // check if movie is already nominated\n  // useEffect(() => {\n  //   if (nominatedList.Title.contains(searchResults.Title)) {\n\n  //   }\n  // }, [searchResults, nominatedList])\n\n  // const nominateButton = () => {\n  //   const button = \n  // };\n\n  // fill data for search results\n  const ResultsList = (props) => {\n    const result = props.results;\n    // check if the searched movie is in the nominations list by filtering the name\n    let copyList = nominatedList;\n    copyList = copyList.filter(item => item.Title === result.Title)\n    // check if a movie was found or not, the API response will be True or False\n\n    if (result.Response === 'True') {\n      // if movie is already nominated grey out button\n      if (copyList.length > 0) {\n        return (\n          <ul>\n            <li>\n              <Grid container direction=\"row\" spacing={2}>\n                <Grid item>\n                  <Typography>{result.Title} ({result.Year})</Typography>\n                </Grid>\n                <Grid item>\n                  <Button variant='outlined' disabled>Nominate</Button>\n                </Grid>\n              </Grid>\n            </li>\n          </ul>\n        )\n      } else {\n        return (\n          <ul>\n            <li>\n              <Grid container direction=\"row\" spacing={2}>\n                <Grid item>\n                  <Typography>{result.Title} ({result.Year})</Typography>\n                </Grid>\n                <Grid item>\n                  <Button variant='outlined' color='primary' onClick={() => addNominee(result)}>Nominate</Button>\n                </Grid>\n              </Grid>\n            </li>\n          </ul>\n        )\n      }\n      \n      \n    } else {\n      return (\n        <Typography>No Movies Found!</Typography>\n      )\n    }\n  }\n\n  // add the current search result \n  const addNominee = (e) => {\n    const tempList = nominatedList;\n    setNominatedList([...tempList, {...e, listId: tempList.length}]);\n  }\n\n  // remove nominee\n  const removeNominee = (e) => {\n    let tempList = nominatedList;\n    tempList = tempList.filter(item => item.listId !== e)\n    setNominatedList(tempList);\n  }\n\n  // fill the nominated movies card\n  const NominatedMovies = (props) => {\n    const nominated = props.nominated;\n    // check if any movies have been nominated\n    if (nominated.length > 0) {\n      const nominees = nominated.map((nominee) =>\n        <li>\n          <Grid container direction=\"row\" spacing={2}>\n            <Grid item>\n              <Typography>{nominee.Title} ({nominee.Year})</Typography>\n            </Grid>\n            <Grid item>\n              <Button variant='outlined' color='primary' onClick={() => removeNominee(nominee.listId)}>Remove</Button>\n            </Grid>\n          </Grid>\n        </li>\n      )\n      return (\n        <ul>\n          {nominees}\n        </ul>\n      )\n    } else {\n      return (\n        <Typography>No Movies have been nominated yet!</Typography>\n      )\n    }\n  }\n\n  // display banner when 5 movies are nominated\n  const Banner = () => {\n    if (nominatedList.length === 5) {\n      return (\n        <Alert severity=\"success\">Congratulations, you have completed your nomination list!</Alert>\n      )\n    } else {\n      return null\n    }\n  }\n  return (\n    <Container>\n      <Grid container spacing={3} direction=\"row\">\n        <Grid item xs={12}>\n          <Banner />\n          <h2> The Shoppies </h2>\n          <form class=\"form-inline\">\n            <TextField\n              id=\"outlined-basic\"\n              label=\"Search Title\"\n              variant=\"outlined\"\n              value={filter}\n              onChange={changeFilter}\n              fullWidth />\n          </form>\n        </Grid>\n        <Grid item xs={6}>\n          <Card className={classes.card}>\n            Results for \"{filter}\" <br /><br />\n            <ResultsList results={searchResults} />\n          </Card>\n        </Grid>\n        <Grid item xs={6}>\n          <Card className={classes.card}>\n            Nominations <br /><br />\n            <NominatedMovies nominated={nominatedList} />\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}